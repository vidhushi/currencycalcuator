{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","result","Country","toCountry","digitOne","currencies","handClick","bind","CurrencyChanger","hchange","axios","get","then","response","currencyAr","key","data","rates","push","setState","catch","err","console","log","evt","this","target","name","value","toFixed","error","message","className","type","placeholder","onChange","map","cur","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAuHeA,G,kBAjHf,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTC,OAAS,KACTC,QAAS,KACTC,UAAW,KACXC,SAAU,KACVC,WAAY,IAEd,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAXJ,E,iFAcO,IAAD,OACjBG,IAAMC,IAAI,sCACTC,MAAK,SAAAC,GACJ,IAAMC,EAAa,CAAC,OACpB,IAAK,IAAMC,KAAOF,EAASG,KAAKC,MAC9BH,EAAWI,KAAKH,GAElB,EAAKI,SAAS,CACZd,WAAaS,OAGhBM,OAAM,SAAAC,GACLC,QAAQC,IAAI,kBAAmBF,Q,8BAI1BG,GAETC,KAAKN,SAAL,eAAiBK,EAAIE,OAAOC,KAAOH,EAAIE,OAAOE,U,kCAI5CN,QAAQC,IAAI,YAAYE,KAAKzB,MAAMK,YACnCiB,QAAQC,IAAI,SACZb,IAAMC,IAAI,sCACTC,MAAK,SAAAC,GAAQ,OAAIA,EAASG,QAC1BJ,MAAK,SAACI,GACLM,QAAQC,IAAIP,Q,wCAIE,IAAD,OACdS,KAAKzB,MAAME,UAAYuB,KAAKzB,MAAMG,UACnCO,IAAMC,IAAN,kDACEc,KAAKzB,MAAME,QADb,oBAEYuB,KAAKzB,MAAMG,YAEtBS,MAAK,SAAAC,GACJ,IAAMZ,EAAS,EAAKD,MAAMI,SAAWS,EAASG,KAAKC,MAAM,EAAKjB,MAAMG,WACpE,EAAKgB,SAAS,CACZlB,OAAQA,EAAO4B,QAAQ,QAG1BT,OAAO,SAAAU,GACNR,QAAQC,IAAI,wBAA0BO,EAAMC,YAI9CN,KAAKN,SAAS,CACZlB,OAAO,0BAGXqB,QAAQC,IAAIE,KAAKzB,MAAMC,U,+BAKrB,OACC,6BACD,yBAAK+B,UAAY,WACjB,oDAEA,yBAAKA,UAAY,aACjB,yBAAKA,UAAY,OACjB,+BACA,+BACA,4BACA,qCAAa,2BAAOC,KAAM,OAAON,KAAO,WAAWO,YAAY,eAAeN,MAAOH,KAAKzB,MAAMI,SAAU+B,SAAYV,KAAKhB,WAE3H,4BACA,mCACA,4BAAQkB,KAAO,UAAUC,MAASH,KAAKzB,MAAME,QAASiC,SAAYV,KAAKhB,SACtEgB,KAAKzB,MAAMK,WAAW+B,KAAI,SAAAC,GAAG,OAC9B,4BAAQtB,IAAKsB,GAAMA,QAInB,4BACA,iCACF,4BAAQV,KAAO,YAAYC,MAASH,KAAKzB,MAAMG,UAAWgC,SAAYV,KAAKhB,SAE1EgB,KAAKzB,MAAMK,WAAW+B,KAAI,SAAAC,GAAG,OAC9B,4BAAQtB,IAAKsB,GAAMA,QAInB,4BAAQC,QAAWb,KAAKjB,iBAAxB,cAGE,wCAAiBiB,KAAKzB,MAAMC,c,GAzGZsC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAU,GACLR,QAAQQ,MAAMA,EAAMC,c","file":"static/js/main.d4bb2187.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component{\n\nconstructor(){\n  super();\n  this.state={\n    result : null,\n    Country: null,\n    toCountry: null,\n    digitOne: null,\n    currencies :[]\n  };\n  this.handClick = this.handClick.bind(this);\n  this.CurrencyChanger = this.CurrencyChanger.bind(this);\n  this.hchange = this.hchange.bind(this);\n}\n\ncomponentDidMount(){\n  axios.get(\"https://api.ratesapi.io/api/latest\")\n  .then(response => {\n    const currencyAr = [\"EUR\"];\n    for (const key in response.data.rates){\n      currencyAr.push(key);\n    }\n    this.setState({\n      currencies : currencyAr\n    });\n  })\n  .catch(err => {\n    console.log(\"something wrong\", err);\n  });\n}\n\nhchange (evt)\n{\nthis.setState({ [evt.target.name]: evt.target.value });\n}\n\nhandClick(){\n  console.log(\"new array\"+this.state.currencies)\n  console.log(\"hello\");\n  axios.get(\"https://api.ratesapi.io/api/latest\")\n  .then(response => response.data)\n  .then((data) => {\n    console.log(data)\n  })\n  }\n\nCurrencyChanger(){\nif(this.state.Country !== this.state.toCountry){\n  axios.get(`https://api.ratesapi.io/api/latest?base=${\n    this.state.Country\n  }&symbols=${this.state.toCountry}`\n  )\n  .then(response => {\n    const result = this.state.digitOne * response.data.rates[this.state.toCountry];\n    this.setState({\n      result: result.toFixed(8)\n    });\n  })\n  .catch (error => {\n    console.log(\"something went wrong\", + error.message)\n  });\n} \nelse{\n  this.setState({\n    result:\"Both country are same\"\n  });\n}\nconsole.log(this.state.result)\n}  \n\n\nrender(){\n  return(\n   <div>\n  <div className = \"heading\">   \n  <h1>Currency Calculator</h1>  \n  </div>\n  <div className = \"boxCenter\">\n  <div className = \"box\">\n  <table>\n  <tbody>\n  <tr>\n  <b>Amount</b><input type =\"text\" name = \"digitOne\" placeholder=\"Enter Amount\" value={this.state.digitOne} onChange = {this.hchange}/>\n  </tr>\n  <tr>\n  <b>From</b>\n  <select name = \"Country\" value = {this.state.Country} onChange = {this.hchange}>\n  {this.state.currencies.map(cur => (\n  <option key={cur}>{cur}</option>\n  ))}\n  </select> \n  </tr>\n  <tr>\n  <b>To</b>\n<select name = \"toCountry\" value = {this.state.toCountry} onChange = {this.hchange}>\n\n{this.state.currencies.map(cur => (\n<option key={cur}>{cur}</option>\n))}\n</select> \n</tr>\n<button onClick = {this.CurrencyChanger}>Calcuate</button>\n  </tbody>  \n  </table>\n  <b>Result = </b>{this.state.result}\n   </div>  \n  </div> \n{/* <button class=\"button\" onClick = {this.handClick}>For More Detail Click Here</button> */}\n</div>\n  );\n}  \n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}